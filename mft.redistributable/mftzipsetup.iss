; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; ************************************************************************
; Copyright (c) IBM Corporation 2016
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; http://www.apache.org/licenses/LICENSE-2.0
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific
;  Contributors:
;    Shashikanth Rao T - Initial Contribution
;***************************************************************************
; This installation script is developed using a trial version of Inno Setup.
; The script demonstrates how MFT redistributable Agent binaries can be
; bundled into another product's installation package and deployed.
;***************************************************************************
#define MyAppName "MFT Agent"
#define MyAppVersion "1.5"
#define MyAppPublisher "IBM Corp"
#define MyAppURL "http://www.ibm.com/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{4E1BA108-409D-45CA-90D7-BCD7B6A04C15}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=C:\MFT91\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename={#MyAppName}
Compression=lzma
SolidCompression=yes
; Tell Windows Explorer to reload the environment
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\Downloads\IBM-MQFA-Redist-Win64\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
; set PATH
Root: HKCU; Subkey: "Environment"; ValueType:string; ValueName:"BFG_DATA"; ValueData:"{code:GetAgentConfigDataPath}" ; Flags: preservestringtype ;

[Run]
;Flags: "64bit"

; Setup Coordination
Filename: "{app}\bin\fteSetupCoordination.cmd"; Parameters: " -coordinationQMgr {code:GetCoordinationQmgrName} -coordinationQMgrHost {code:GetCoordinationQmgrNameHost} -coordinationQMgrPort {code:GetCoordinationQmgrNamePort} -coordinationQMgrChannel {code:GetCoordinationQmgrNameChannel} -f > {app}\instlog.txt"

; Setup Command
Filename: "{app}\bin\fteSetupCommands.cmd"; Parameters: " -p {code:GetCoordinationQmgrName} -connectionQMgr  {code:GetCommandQmgrName} -connectionQMgrHost {code:GetCommandQmgrNameHost} -coordinationQMgrPort {code:GetCommandQmgrNamePort} -connectionQMgrChannel  {code:GetCommandQmgrNameChannel} -f >> {app}\instlog.txt"

; Setup an agent
Filename: "{app}\bin\fteCreateAgent.cmd"; Parameters: " -p {code:GetCoordinationQmgrName} -agentName {code:GetAgentName} -agentQMgr {code:GetAgentQmgrName} -agentQMgrHost  {code:GetAgentQmgrHost} -agentQMgrPort {code:GetAgentQmgrPort} -agentQMgrChannel  {code:GetAgentQmgrChannel} -f >> {app}\instlog.txt"

[Code]
const
  OffsetPixels = 11;

procedure OffsetPageItem(Page: TInputQueryWizardPage; Index, 
  Offset: Integer);
begin
  Page.Edits[Index].Top := Page.Edits[Index].Top + Offset;
  Page.PromptLabels[Index].Top := Page.PromptLabels[Index].Top +
    Offset;
end;

var
  ConfigDataPathPage: TInputQueryWizardPage;
  CoordinationQmgrPage: TInputQueryWizardPage;
  CommandQmgrPage: TInputQueryWizardPage;
  AgentNamePage: TInputQueryWizardPage;
  Index: Integer;

{ Get Coordination queue manager details}
function GetCoordinationQmgrName(Value: string): string;
begin
  Result := CoordinationQmgrPage.Values[0];
end;

function GetCoordinationQmgrNameHost(Value: string): string;
begin
  Result := CoordinationQmgrPage.Values[1];
end;

function GetCoordinationQmgrNamePort(Value: string): string;
begin
  Result := CoordinationQmgrPage.Values[2];
end;

function GetCoordinationQmgrNameChannel(Value: string): string;
begin
  Result := CoordinationQmgrPage.Values[3];
end;

{Get Command queue manager details}
function GetCommandQmgrName(Value: string): string;
begin
  Result := CommandQmgrPage.Values[0];
end;

function GetCommandQmgrNameHost(Value: string): string;
begin
  Result := CommandQmgrPage.Values[1];
end;

function GetCommandQmgrNamePort(Value: string): string;
begin
  Result := CommandQmgrPage.Values[2];
end;

function GetCommandQmgrNameChannel(Value: string): string;
begin
  Result := CommandQmgrPage.Values[3];
end;

{ Get Agent details}
function GetAgentName(Value: string): string;
begin
  Result := AgentNamePage.Values[0];
end;

function GetAgentQmgrName(Value: string): string;
begin
  Result := AgentNamePage.Values[1];
end;

function GetAgentQmgrHost(Value: string): string;
begin
  Result := AgentNamePage.Values[2];
end;

function GetAgentQmgrPort(Value: string): string;
begin
  Result := AgentNamePage.Values[3];
end;

function GetAgentQmgrChannel(Value: string): string;
begin
  Result := AgentNamePage.Values[4];
end;

function GetAgentConfigDataPath(Value: string): string;
begin
  Result := ConfigDataPathPage.Values[0];
end;

{End of Gets}

#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif

function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';

procedure SetEnvPath;
begin
  if not SetEnvironmentVariable('BFG_DATA', '{code:GetAgentConfigDataPath}') then
    MsgBox(SysErrorMessage(DLLGetLastError), mbError, MB_OK);
end;
  
procedure InitializeWizard;
begin
  { Create the Configuration Data Path page}
  ConfigDataPathPage := CreateInputQueryPage(wpSelectDir,
    'Configure Data Path', '',
    'Please specify path for storing configuration data, then click Next.');
  ConfigDataPathPage.Add('Configuration Data Path:', False);

  { Create the Coordination Queue Manager Setup page}
  CoordinationQmgrPage := CreateInputQueryPage(ConfigDataPathPage.ID,
    'Coordination Queue Manager Setup', '',
    'Please specify Coordination Queue Manager information, then click Next.');
  CoordinationQmgrPage.Add('Queue Manager Name:', False);
  CoordinationQmgrPage.Add('Host Name:', False);
  CoordinationQmgrPage.Add('Port:', False);
  CoordinationQmgrPage.Add('Channel:', False);

  CoordinationQmgrPage.Values[0] := ExpandConstant('COORDQM');
  CoordinationQmgrPage.Values[1] := ExpandConstant('coordqm.mycomp.com');
  CoordinationQmgrPage.Values[2] := ExpandConstant('1414');
  CoordinationQmgrPage.Values[3] := ExpandConstant('APPSVRCONN');
   
  { Create the Command Queue Manager Setup page}
  CommandQmgrPage := CreateInputQueryPage(CoordinationQmgrPage.ID,
    'Command Queue Manager Setup', '',
    'Please specify Command Queue Manager information, then click Next..');
  CommandQmgrPage.Add('Queue Manager Name)', False);
  CommandQmgrPage.Add('Host Name',False);
  CommandQmgrPage.Add('Port', False);
  CommandQmgrPage.Add('Channel Name', False);

  CommandQmgrPage.Values[0] := ExpandConstant('CMDQM');
  CommandQmgrPage.Values[1] := ExpandConstant('cmdqm.mycomp.com');
  CommandQmgrPage.Values[2] := ExpandConstant('1414');
  CommandQmgrPage.Values[3] := ExpandConstant('APPSVRCONN');

  { Create the Agent Setup page}
  AgentNamePage := CreateInputQueryPage(CommandQmgrPage.ID,
    'Agent Setup', '',
    'Please provide information required for creating an agent');
  Index := AgentNamePage.Add('Agent Name:', False);
  Index := AgentNamePage.Add('Queue Manager Name:', False);
  OffsetPageItem(AgentNamePage, Index, -Index * OffsetPixels);
  Index := AgentNamePage.Add('Host Name:', False);
  OffsetPageItem(AgentNamePage, Index, -Index * OffsetPixels);
  Index := AgentNamePage.Add('Port :', False);
  OffsetPageItem(AgentNamePage, Index, -Index * OffsetPixels);
  Index := AgentNamePage.Add('Channel Name:', False);
  OffsetPageItem(AgentNamePage, Index, -Index * OffsetPixels);

  AgentNamePage.Values[0] := ExpandConstant('ZIPAGENT');
  AgentNamePage.Values[1] := ExpandConstant('ZIPAGENTQM');
  AgentNamePage.Values[2] := ExpandConstant('zipagentqm.mycomp.com');
  AgentNamePage.Values[3] := ExpandConstant('1414');
  AgentNamePage.Values[4] := ExpandConstant('APPSVRCONN');

end;
 

procedure RegisterPreviousData(PreviousDataKey: Integer);
  
begin
  { Store the settings so we can restore them next time }
  SetPreviousData(PreviousDataKey, 'CoordinationQmgrName', CoordinationQmgrPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'CoordinationQmgrNameHost', CoordinationQmgrPage.Values[1]);
  SetPreviousData(PreviousDataKey, 'CoordinationQmgrNamePort', CoordinationQmgrPage.Values[2]);
  SetPreviousData(PreviousDataKey, 'CoordinationQmgrNameChannel', CoordinationQmgrPage.Values[3]);

  SetPreviousData(PreviousDataKey, 'CommandQmgrName', CommandQmgrPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'CommandQmgrNameHost', CommandQmgrPage.Values[1]);
  SetPreviousData(PreviousDataKey, 'CommandQmgrNamePort', CommandQmgrPage.Values[2]);
  SetPreviousData(PreviousDataKey, 'CommandQmgrNameChannel', CommandQmgrPage.Values[3]);

  SetPreviousData(PreviousDataKey, 'AgentName', AgentNamePage.Values[0]);
  SetPreviousData(PreviousDataKey, 'AgentQmgrName', AgentNamePage.Values[1]);
  SetPreviousData(PreviousDataKey, 'AgentQmgrNameHost', AgentNamePage.Values[2]);
  SetPreviousData(PreviousDataKey, 'AgentQmgrNamePort', AgentNamePage.Values[3]);
  SetPreviousData(PreviousDataKey, 'AgentQmgrNameChannel', AgentNamePage.Values[4]);
end;

function NextButtonClick(CurPageID: Integer): Boolean;

begin
  { Validate certain pages before allowing the user to proceed }
  if CurPageID = CoordinationQmgrPage.ID then begin
    if CoordinationQmgrPage.Values[0] = '' then begin
      MsgBox('You must enter coordination queue manager name.', mbError, MB_OK);
      Result := False;
    end else if CoordinationQmgrPage.Values[1] = '' then begin
      MsgBox('You must enter coordination queue manager host name.', mbError, MB_OK);
      Result := False;
    end else if CoordinationQmgrPage.Values[2] = '' then begin
      MsgBox('You must enter coordination queue manager port number.', mbError, MB_OK);
      Result := False;
    end else if CoordinationQmgrPage.Values[3] = '' then begin
      MsgBox('You must enter coordination queue manager channel name.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := True;
    end;
  end else if CurPageID = CommandQmgrPage.ID then begin
    if CommandQmgrPage.Values[0] = '' then begin
      MsgBox('You must enter command queue manager name.', mbError, MB_OK);
      Result := False;
    end else if CommandQmgrPage.Values[1] = '' then begin
      MsgBox('You must enter command queue manager host name.', mbError, MB_OK);
      Result := False;
    end else if CommandQmgrPage.Values[2] = '' then begin
      MsgBox('You must enter command queue manager port number.', mbError, MB_OK);
      Result := False;
    end else if CommandQmgrPage.Values[3] = '' then begin
      MsgBox('You must enter command queue manager channel name.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := True;
    end;
  end else if CurPageID =  AgentNamePage.ID then begin
    if AgentNamePage.Values[0] = '' then begin
      MsgBox('You must enter Agent name.', mbError, MB_OK);
      Result := False;
    end else if AgentNamePage.Values[1] = '' then begin
      MsgBox('You must enter agent queue manager host name.', mbError, MB_OK);
      Result := False;
    end else if AgentNamePage.Values[2] = '' then begin
      MsgBox('You must enter agent queue manager port number.', mbError, MB_OK);
      Result := False;
    end else if AgentNamePage.Values[3] = '' then begin
      MsgBox('You must enter agent queue manager channel name.', mbError, MB_OK);
      Result := False;
    end else if AgentNamePage.Values[4] = '' then begin
      MsgBox('You must enter agent queue manager channel name.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := True;
    end;
  end else
      Result := True;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
  MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
  S: String;
begin
  { Fill the 'Ready Memo' with the normal settings and the custom settings }
  S := '';

  S := S + Space + 'Data Folder' + Space + ConfigDataPathPage.Values[0] + NewLine;
  
  S := S + Space + 'Coordination Queue Manager Name' + Space + CoordinationQmgrPage.Values[0] + NewLine;
  S := S + Space + 'Coordination Queue Manager Host Name' + Space + CoordinationQmgrPage.Values[1] + NewLine;
  S := S + Space + 'Coordination Queue Manager Port' + Space + CoordinationQmgrPage.Values[2] + NewLine;
  S := S + Space + 'Coordination Queue Manager Channel Name' + Space + CoordinationQmgrPage.Values[3] + NewLine;

  S := S + NewLine;

  S := S + Space + 'Command Queue Manager Name' + Space + CommandQmgrPage.Values[0] + NewLine;
  S := S + Space + 'Command Queue Manager Host Name' + Space + CommandQmgrPage.Values[1] + NewLine;
  S := S + Space + 'Command Queue Manager Port' + Space + CommandQmgrPage.Values[2] + NewLine;
  S := S + Space + 'Command Queue Manager Channel Name' + Space + CommandQmgrPage.Values[3] + NewLine;

  S := S + NewLine;

  S := S + Space + 'Agent Name' + Space + AgentNamePage.Values[0] + NewLine;
  S := S + Space + 'Agent Queue Manager Name' + Space + AgentNamePage.Values[1] + NewLine;
  S := S + Space + 'Agent Queue Manager Host Name' + Space + AgentNamePage.Values[2] + NewLine;
  S := S + Space + 'Agent Queue Manager Port' + Space + AgentNamePage.Values[3] + NewLine;
  S := S + Space + 'Agent Queue Manager Channel Name' + Space + AgentNamePage.Values[4] + NewLine;

  S := S + NewLine;
  Result := S;
end;

function GetUser(Param: String): String;
begin
  { Return a user value }
  { Could also be split into separate GetUserName and GetUserCompany functions }
  if Param = 'Name' then
    Result := CoordinationQmgrPage.Values[0]
  else if Param = 'Company' then
    Result := CoordinationQmgrPage.Values[1];
end;
